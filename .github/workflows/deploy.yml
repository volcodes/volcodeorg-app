on:
  push:
    branches: [ main, staging ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "NUXT_PUBLIC_IS_STAGING=false" >> $GITHUB_ENV
          else
            echo "NUXT_PUBLIC_IS_STAGING=true" >> $GITHUB_ENV
          fi
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0
          
      - name: Build static site
        env:
          NUXT_PUBLIC_IS_STAGING: ${{ env.NUXT_PUBLIC_IS_STAGING }}
        run: |
          npm ci
          npm run generate
          
      - name: Sync to S3
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            BUCKET="volcode-volcode.org-default"
          else
            BUCKET="volcode-staging.volcode.org-default"
          fi
          aws s3 sync ./dist s3://$BUCKET --delete
          
      - name: Invalidate CloudFront
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            DOMAIN="volcode.org"
          else
            DOMAIN="staging.volcode.org"
          fi
          
          echo "Finding CloudFront distribution for $DOMAIN"
          
          # Get all CloudFront distributions
          DISTRIBUTIONS=$(aws cloudfront list-distributions --output json)
          
          # Find distribution by matching the S3 bucket name in origin
          BUCKET_NAME="volcode-${DOMAIN}-default"
          DIST_ID=$(echo "$DISTRIBUTIONS" | jq -r --arg bucket "$BUCKET_NAME" \
            '.DistributionList.Items[] | 
             select(.Origins.Items != null) | 
             select(.Origins.Items[].DomainName | contains($bucket)) | 
             .Id')
          
          if [ -z "$DIST_ID" ]; then
            echo "No CloudFront distribution found for $DOMAIN (bucket: $BUCKET_NAME)"
            echo "Skipping invalidation"
            exit 0
          fi
          
          echo "Found distribution ID: $DIST_ID for $DOMAIN"
          echo "Invalidating CloudFront cache..."
          
          # Check if the current user has permission to invalidate
          if aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"; then
            echo "Cache invalidation started successfully"
          else
            echo "Failed to invalidate cache - this is likely a permissions issue"
            echo "You may need to add cloudfront:CreateInvalidation permission to your IAM user"
            echo "Continuing with deployment anyway"
          fi
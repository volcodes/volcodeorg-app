name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]

jobs:
  test:
    runs-on: ubuntu-latest
    container: 
      image: node:20
    steps:
      - uses: actions/checkout@v3
      
      - name: Install All Packages
        run: npm ci
      
      - name: Run Tests
        run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "NUXT_PUBLIC_IS_STAGING=false" >> $GITHUB_ENV
          else
            echo "NUXT_PUBLIC_IS_STAGING=true" >> $GITHUB_ENV
          fi
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0
          
      - name: Build static site
        env:
          NUXT_PUBLIC_IS_STAGING: ${{ env.NUXT_PUBLIC_IS_STAGING }}
        run: |
          npm ci
          npm run generate
          
      - name: Sync to S3
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            BUCKET="volcode-volcode.org-default"
          else
            BUCKET="volcode-staging.volcode.org-default"
          fi
          aws s3 sync ./dist s3://$BUCKET --delete
          
      - name: Invalidate CloudFront
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Set domain based on branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            DOMAIN="volcode.org"
          else
            DOMAIN="staging.volcode.org"
          fi
          BUCKET_NAME="volcode-${DOMAIN}-default"
          
          echo "üîç Finding CloudFront distribution for $DOMAIN..."
          
          # Find the correct distribution ID by matching S3 bucket in origin
          DISTRIBUTIONS=$(aws cloudfront list-distributions --output json)
          DIST_ID=$(echo "$DISTRIBUTIONS" | jq -r --arg bucket "$BUCKET_NAME" '
            .DistributionList.Items[] | 
            select(.Origins.Items != null) | 
            select(.Origins.Items[].DomainName | contains($bucket)) | 
            .Id
          ')
          
          # Skip if no distribution found
          if [ -z "$DIST_ID" ]; then
            echo "‚ö†Ô∏è No CloudFront distribution found for $DOMAIN"
            echo "   Skipping invalidation"
            exit 0
          fi
          
          echo "‚úÖ Found distribution ID: $DIST_ID for $DOMAIN"
          echo "üîÑ Attempting to invalidate CloudFront cache..."
          
          # Run invalidation with error handling - use true to prevent workflow failure
          if aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*" || true; then
            # This block will always run due to the || true
            # Check if we got a real error message in the output
            if [[ $? -ne 0 ]]; then
              echo "‚ö†Ô∏è Failed to invalidate cache - likely a permissions issue"
              echo "   You need to add cloudfront:CreateInvalidation permission to your IAM user"
              echo "   The deployment will continue without cache invalidation"
            else
              echo "‚úÖ Cache invalidation started successfully"
            fi
          fi
          
          # Always exit with success
          echo "Deployment completed successfully"
on:
  push:
    branches: [ main, staging ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "NUXT_PUBLIC_IS_STAGING=false" >> $GITHUB_ENV
          else
            echo "NUXT_PUBLIC_IS_STAGING=true" >> $GITHUB_ENV
          fi
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0
          
      - name: Build static site
        env:
          NUXT_PUBLIC_IS_STAGING: ${{ env.NUXT_PUBLIC_IS_STAGING }}
        run: |
          npm ci
          npm run generate
          
      - name: Sync to S3
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            BUCKET="volcode-volcode.org-default"
          else
            BUCKET="volcode-staging.volcode.org-default"
          fi
          aws s3 sync ./dist s3://$BUCKET --delete
          
      - name: Invalidate CloudFront
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            DOMAIN="volcode.org"
          else
            DOMAIN="staging.volcode.org"
          fi
          
          echo "Finding CloudFront distribution for $DOMAIN"
          
          # Get all CloudFront distributions and find the one for our domain
          DISTRIBUTIONS=$(aws cloudfront list-distributions --output json)
          
          # Extract distribution ID associated with our domain
          # We're looking for a distribution with an alias that matches our domain
          DIST_ID=$(echo "$DISTRIBUTIONS" | jq -r --arg domain "$DOMAIN" '.DistributionList.Items[] | select(.Aliases.Items[] | contains($domain)) | .Id')
          
          # Fallback: If no match by alias, try matching by origin domain name (S3 bucket)
          if [ -z "$DIST_ID" ]; then
            S3_DOMAIN="volcode-${DOMAIN}-default.s3-website-us-east-1.amazonaws.com"
            echo "Looking for distribution with origin $S3_DOMAIN"
            DIST_ID=$(echo "$DISTRIBUTIONS" | jq -r --arg origin "$S3_DOMAIN" '.DistributionList.Items[] | select(.Origins.Items[].DomainName | contains($origin)) | .Id')
          fi
          
          # If still no match, list distributions for debugging
          if [ -z "$DIST_ID" ]; then
            echo "Could not find distribution for $DOMAIN. Listing all distributions:"
            echo "$DISTRIBUTIONS" | jq -r '.DistributionList.Items[] | .Id + " - Origins: " + (.Origins.Items[] | .DomainName) + " - Aliases: " + (.Aliases.Items | join(", "))'
          else
            echo "Found distribution ID: $DIST_ID for domain $DOMAIN"
            echo "Invalidating cache for distribution $DIST_ID"
            aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"
          fi